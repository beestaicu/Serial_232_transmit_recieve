
Serial_232_transmit_recieve.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000015a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000828  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000745  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a9  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bd  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  9e:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#include <avr/interrupt.h>
#include "USART_M328P.h"
uint8_t buffer;
volatile uint8_t StrRX_flag = 0;

ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	buffer= UDR0;
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <buffer>
	StrRX_flag = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
    DDRB = 0b11111100;
  cc:	8c ef       	ldi	r24, 0xFC	; 252
  ce:	84 b9       	out	0x04, r24	; 4
	USART0Init();
  d0:	0e 94 80 00 	call	0x100	; 0x100 <USART0Init>
	sei();
  d4:	78 94       	sei
	USART_putstring("A");
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 9b 00 	call	0x136	; 0x136 <USART_putstring>
	PORTB |= (1<<PORTB4);
  de:	2c 9a       	sbi	0x05, 4	; 5
    while (1) 
    {	
		if (StrRX_flag ==1){
  e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x14>
			
			//turn off light
			if (buffer==89){ 
  e8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buffer>
  ec:	89 35       	cpi	r24, 0x59	; 89
  ee:	11 f4       	brne	.+4      	; 0xf4 <main+0x28>
				PORTB |= (1<<PORTB4);//red
  f0:	2c 9a       	sbi	0x05, 4	; 5
  f2:	03 c0       	rjmp	.+6      	; 0xfa <main+0x2e>
				
				
			}
			//turn off light
			else if (buffer==88){
  f4:	88 35       	cpi	r24, 0x58	; 88
  f6:	09 f4       	brne	.+2      	; 0xfa <main+0x2e>
				PORTB &=~ (1<<PORTB4);
  f8:	2c 98       	cbi	0x05, 4	; 5
			}
			StrRX_flag =0;
  fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  fe:	f0 cf       	rjmp	.-32     	; 0xe0 <main+0x14>

00000100 <USART0Init>:
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
	// Return received data
	return UDR0;
}
 100:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 104:	87 e6       	ldi	r24, 0x67	; 103
 106:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 10a:	e2 ec       	ldi	r30, 0xC2	; 194
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	86 60       	ori	r24, 0x06	; 6
 112:	80 83       	st	Z, r24
 114:	e1 ec       	ldi	r30, 0xC1	; 193
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <USART0SendByte>:
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	95 ff       	sbrs	r25, 5
 12e:	fd cf       	rjmp	.-6      	; 0x12a <USART0SendByte+0x4>
 130:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 134:	08 95       	ret

00000136 <USART_putstring>:

void USART_putstring(char* StringPtr){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	39 f0       	breq	.+14     	; 0x150 <USART_putstring+0x1a>
 142:	21 96       	adiw	r28, 0x01	; 1
		USART0SendByte(*StringPtr);
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 93 00 	call	0x126	; 0x126 <USART0SendByte>
	return UDR0;
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 14a:	89 91       	ld	r24, Y+
 14c:	81 11       	cpse	r24, r1
 14e:	fa cf       	rjmp	.-12     	; 0x144 <USART_putstring+0xe>
	StringPtr++;
	
	}
	
	
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
